C++ What is OOP?
OOP stands for Object-Oriented Programming.

Object-oriented programming is about creating "objects", which can hold data and functions that work on that data.

Advantages of OOP
OOP provides a clear structure to programs
Makes code easier to maintain, reuse, and debug
Helps keep your code DRY (Don't Repeat Yourself)
Makes it possible to create full reusable applications with less code and shorter development time
Tip: The DRY principle means you should avoid writing the same code more than once. Move repeated code into functions or classes and reuse it.

What are Classes and Objects?
Classes and objects are the two main aspects of object-oriented programming.

A class defines what an object should look like, and an object is created based on that class. For example:
Class	Objects
Fruit	Apple, Banana, Mango
Car	Volvo, Audi, Toyota
When you create an object from a class, it inherits all the variables and functions defined inside that class.

Procedural vs Object-Oriented Programming
Procedural programming is about writing functions that operate on data.
Object-oriented programming (OOP) is about creating objects that contain both the data and the functions.
In procedural programming, the code is organized around functions.
In object-oriented programming, the code is organized around objects.

C++ Classes and Objects
C++ Classes/Objects

C++ is an object-oriented programming language.
Everything in C++ is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.
Attributes and methods are basically variables and functions that belongs to the class. These are often referred to as "class members".
A class is a user-defined data type that we can use in our program, and it works as an object constructor, or a "blueprint" for creating objects.

Create a Class
To create a class, use the class keyword:
Example
Create a class called "MyClass":
class MyClass {       // The class
  public:             // Access specifier
    int myNum;        // Attribute (int variable)
    string myString;  // Attribute (string variable)
};

Create an Object

In C++, an object is created from a class. We have already created the class named MyClass, so now we can use this to create objects.
To create an object of MyClass, specify the class name, followed by the object name.
To access the class attributes (myNum and myString), use the dot syntax (.) on the object:

Example
Create an object called "myObj" and access the attributes:
class MyClass {       // The class
  public:             // Access specifier
    int myNum;        // Attribute (int variable)
    string myString;  // Attribute (string variable)
};
int main() {
  MyClass myObj;  // Create an object of MyClass
  // Access attributes and set values
  myObj.myNum = 15; 
  myObj.myString = "Some text";
  // Print attribute values
  cout << myObj.myNum << "\n";
  cout << myObj.myString;
  return 0;
}

Multiple Objects

You can create multiple objects of one class:
Example
// Create a Car class with some attributes
class Car {
  public:
    string brand;   
    string model;
    int year;
};
int main() {
  // Create an object of Car
  Car carObj1;
  carObj1.brand = "BMW";
  carObj1.model = "X5";
  carObj1.year = 1999;
  // Create another object of Car
  Car carObj2;
  carObj2.brand = "Ford";
  carObj2.model = "Mustang";
  carObj2.year = 1969;
  // Print attribute values
  cout << carObj1.brand << " " << carObj1.model << " " << carObj1.year << "\n";
  cout << carObj2.brand << " " << carObj2.model << " " << carObj2.year << "\n";
  return 0;
}

C++ Class Methods
Class Methods

Methods are functions that belongs to the class.
There are two ways to define functions that belongs to a class:
Inside class definition
Outside class definition
Define a Method Inside the Class
In the following example, we define a function inside the class, and we name it "myMethod".
Note: You access methods just like you access attributes; by creating an object of the class and using the dot syntax (.):

Inside Example
----------------------------------------
class MyClass {        // The class
  public:              // Access specifier
    void myMethod() {  // Method/function defined inside the class
      cout << "Hello World!";
    }
};
int main() {
  MyClass myObj;     // Create an object of MyClass
  myObj.myMethod();  // Call the method
  return 0;
}
---------------------------------------------
Define a Method Outside the Class

Sometimes it is better to declare the method in the class and define it later (especially in large programs).
This is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function:

Outside Example
------------------------------------------------------
class MyClass {        // The class
  public:              // Access specifier
    void myMethod();   // Method/function declaration
};
// Method/function definition outside the class
void MyClass::myMethod() {
  cout << "Hello World!";
}
int main() {
  MyClass myObj;     // Create an object of MyClass
  myObj.myMethod();  // Call the method
  return 0;
}
------------------------------------------------------
Parameters

You can also pass values to methods just like regular functions:
 Example

#include <iostream>
using namespace std;
class Car {
  public:
    int speed(int maxSpeed);
};
int Car::speed(int maxSpeed) {
  return maxSpeed;
}
int main() {
  Car myObj; // Create an object of Car
  cout << myObj.speed(200); // Call the method with an argument
  return 0;
}
