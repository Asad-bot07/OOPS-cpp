Templates in C++
C++ template is a powerful tool that allows you to write a generic code that can work with any data type. The idea is to simply pass the data type as a parameter so that we don't need to write the same code for different data types.
For example, same sorting algorithm can work for different type, so rather than writing and maintaining multiple codes, we can write one sort() and pass the datatype as a parameter.

Define Templates
Templates can be defined using the keywords "template" and "typename" as shown:
template <typename A, typename B, ...>
entity_definition

The template keyword is used to define that the given entity is a template and typename keyword is used to define template parameters which are nothing but types that will be provided when an instance is created. The keyword typename can be replaced by keyword class anytime.
template <class A, class B, ...>
entity_definition


The above syntax can define templates for three components (entities) of C++ language:
Function Templates
Class Templates

Create Template Instance
After definition, we can create the instance of template for any desired type by passing the type as template parameter as shown:
name_of_entity<type1, type2, ...>
