Function Overriding in C++                                                     |
--------------------------------------------------------------------------------
What is a function?(recap)
A function is a block of statements that together performs a specific task by taking some input and producing a particular output. Function overriding in C++ is termed as the redefinition of base class function in its derived class with the same signature i.e. return type and parameters. It can be of both type: Compile Time and Runtime Polymorphism.

What is Function Overriding in C++?
Function overriding is a type of polymorphism in which we redefine the member function of a class which it inherited from its base class. The function signature remains same but the working of the function is altered to meet the needs of the derived class. So, when we call the function using its name for the parent object, the parent class function is executed. But when we call the function using the child object, the child class version will be executed.
Real-Life Example of Function Overriding
The best Real-life example of this concept is the Constitution of India. India took the political code, structure, procedures, powers, and duties of government institutions and set out fundamental rights, directive principles, and the duties of citizens of other countries and implemented them on its own; making it the biggest constitution in the world. 
Another Development real-life example could be the relationship between RBI(The Reserve Bank of India) and Other state banks like SBI, PNB, ICICI, etc. Where the RBI passes the same regulatory function and others follow it as it is.

Function Overriding using Virtual Function
Function overriding is performed at the runtime, which means that function call will be binded to its definition during runtime (also known as late binding or dynamic binding). This can be done with the help of virtual functions.

What is a virtual function?
A virtual function (also known as virtual methods) is a member function that is declared within a base class and is re-defined (overridden) by a derived class. When you refer to a derived class object using a pointer or a reference to the base class, you can call a virtual function for that object and execute the derived class's version of the method.
Virtual functions ensure that the correct function is called for an object, regardless of the type of reference (or pointer) used for the function call.
They are mainly used to achieve Runtime polymorphism.
Functions are declared with a virtual keyword in a base class.
The resolving of a function call is done at runtime.

What is a Pure Virtual Function?
A virtual function is called a pure virtual function if it does not have any implementation and is assigned = 0. A class that contains a pure virtual function is called an abstract class.

Early Binding and Late Binding
In layman's terms, when a function is called in the code, binding decides which function gets executed based on the context such as the type of object or the function signature. Binding happens at two levels:
Early Binding: It happens when a function call is resolved during the program's compilation. This makes it faster because everything is decided early
Late Binding: It happens with virtual functions where the exact function to call is decided at runtime, depending on the actual object type. This is slower because the program has to figure it out while running.

Working of Virtual Functions (concept of VTABLE and VPTR)
As discussed here, if a class contains a virtual function then the compiler itself does two things.
If an object of that class is created, then a virtual pointer (VPTR) is inserted as a data member of the class to point to the VTABLE of that class. For each new object created, a new virtual pointer is inserted as a data member of that class.
Irrespective of whether the object is created or not, the class contains as a member a static array of function pointers called VTABLE. Cells of this table store the address of each virtual function contained in that class.

Rules for Virtual Functions
The rules for the virtual functions in C++ are as follows:

-Virtual functions cannot be static.
-A virtual function can be a friend function of another class.
-Virtual functions should be accessed using a pointer or reference of base class type to achieve runtime polymorphism.
-The prototype of virtual functions should be the same in the base as well as the derived class.
-They are always defined in the base class and overridden in a derived class. It is not mandatory for the derived class to override (or re-define the virtual function), in that case, the base class version of the function is used.
-A class may have a virtual destructor, but it cannot have a virtual constructor.

Limitations of Virtual Functions

-Slower: The function call takes slightly longer due to the virtual mechanism and makes it more difficult for the compiler to optimize because it does not know exactly which function is going to be called at compile time.
-Difficult to Debug: In a complex system, virtual functions can make it a little more difficult to figure out where a function is being called from.
